{
    "pipes": [],
    "interfaces": [
        {
            "name": "Disposable",
            "id": "interface-Disposable-e5e8a9b5a5baaf82641bc5748ac6b4400d80a20940ba167846e451c164561dfcb9b9ec4e3bb60622360efd1979ac6992794544bc48d8b225d9b4ca96259dfe88",
            "file": "src/utils/disposer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type DisposableFn = () => void;\n\n/** Objects disposable with an `Disposer`. */\nexport interface Disposable {\n  dispose(): void;\n}\n\n/**\n * Tracks cleanup code and runs it upon calling `dispose`.\n *\n * By default, the disposer must not be used after it has been disposed. This\n * helps avoid memory leaks by preventing accidental registration of cleanup\n * code. Create the Disposer with `multiShot` set to\n */\nexport class Disposer implements Disposable {\n  // null after a one-shot disposer was disposed.\n  private _disposables?: Array<DisposableFn> = [];\n\n  /**\n   * @param multiShot Whether the disposer can be used for multiple dispose\n   * cycles.\n   */\n  constructor(private multiShot: boolean = false) {}\n\n  /**\n   * Registers the function to be called upon `dispose()`.\n   *\n   * Must not be called on a one-shot Disposer after it has been disposed.\n   */\n  addFunction(disposable: DisposableFn) {\n    if (!this._disposables) {\n      throw new Error('Adding new disposabled to already disposed one-shot disposer');\n    }\n    this._disposables!.push(disposable);\n  }\n\n  /**\n   * Registers the listener at the `eventTarget` and unregisters it upon\n   * `dispose()`.\n   *\n   * Must not be called on a one-shot Disposer after it has been disposed.\n   */\n  addListener(\n    eventTarget: EventTarget,\n    type: string,\n    callback: EventListenerOrEventListenerObject,\n    options?: AddEventListenerOptions | boolean\n  ) {\n    this.addFunction(() => eventTarget.removeEventListener(type, callback, options));\n    eventTarget.addEventListener(type, callback, options);\n  }\n\n  /**\n   * Registers the Disposable to be cleaned up upon `dispose()`.\n   *\n   * Must not be called on a one-shot Disposer after it has been disposed.\n   */\n  addDisposable(disposable: Disposable) {\n    this.addFunction(disposable.dispose.bind(disposable));\n  }\n\n  /**\n   * Disposes all registered cleanup code.\n   *\n   * Must be called exactly once for one-shot Disposers, or at least once for\n   * multi-shot disposers.\n   */\n  dispose(): void {\n    if (!this._disposables) {\n      throw new Error('dispose() an already disposed one-shot disposer.');\n    }\n\n    const toDispose = this._disposables;\n    this._disposables = this.multiShot ? [] : undefined;\n    for (const disposable of toDispose) {\n      disposable();\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "description": "<p>Objects disposable with an <code>Disposer</code>.</p>\n",
            "rawdescription": "\nObjects disposable with an `Disposer`.",
            "methods": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "ErrorState",
            "id": "interface-ErrorState-e9dc2b99151149854fb440608427911883da809105aa876b44b7bb7ded22746e6323c1b3294932cd3bcc7c16e0544ce92a63e114cc434cce5c340c47add95fbf",
            "file": "src/model/motion_connection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { fixedRetryDelay, NonRetryableError, retry } from '../utils/retry';\nimport { checkNotNull, checkState } from '../utils/preconditions';\nimport { isNamedError, namedError } from '../utils/utils';\nimport * as generated_proto from '../proto/motion.js';\nimport motion_proto = generated_proto.com.android.motion;\n\nconst CLIENT_VERSION = 1;\nconst MOTION_TOOLS_CHUNK_TYPE = getChunkType('MOTO');\n\nexport type State = OkState | ErrorState;\n\ninterface OkState {\n  type: 'disconnected' | 'connecting' | 'connected' | 'unauthorized';\n}\n\ninterface ErrorState {\n  type: 'error';\n  detail: 'deviceNotFound' | 'processNotFound' | 'windowNotFound' | 'unknown';\n  message?: string;\n  exception?: unknown;\n}\n\n/**\n * Connection description that can be serialized to a URL for bookmarkability.\n */\nexport class MotionConnection extends EventTarget {\n  private _adbDevice?: AdbDevice;\n  private _jdwp?: jdwp;\n\n  /**\n   * @param deviceId Device serial number\n   * @param processId Numeric process ID\n   * @param processName Name of the process\n   * @param windowId The window name being inspected\n   */\n  constructor(\n    public readonly deviceId: string,\n    public readonly processId: number,\n    public readonly processName: string,\n    public readonly windowId: string\n  ) {\n    super();\n  }\n\n  /**\n   * Parses  URL parameters to restore a bookmarked connection.\n   *\n   * @param urlParams from windwow.location.search\n   * @throws {Error} if url params are missing or wrongly formatted.\n   */\n  static createFromUrlParams(urlParams: URLSearchParams): MotionConnection {\n    function validatedParam(name: string, test: RegExp) {\n      const value = urlParams.get(name);\n      if (!value?.match(test)) {\n        throw namedError('InvalidUrlParams', `Invalid param ${name} (${value})`);\n      }\n      return value!;\n    }\n\n    const deviceId = validatedParam('serial', /[a-zA-Z0-9]{14}/);\n    const pid = Number.parseInt(validatedParam('pid', /\\d+/));\n    const processName = validatedParam('pname', /.+/);\n    const windowId = validatedParam('wid', /.+/);\n\n    return new MotionConnection(deviceId, pid, processName, windowId);\n  }\n\n  // Overall state of this motion connection.\n  // This is a composite of the ADB, JDWP and DDMS state.\n  private _state: State = { type: 'disconnected' };\n\n  // Whether the _adbDevice is in the connected state.\n  private _deviceConnected = false;\n  // Completes when as soon as `_deviceConnected === true`\n  private _deviceConnectedPromise = deferred<void>();\n\n  get state() {\n    return this._state;\n  }\n\n  private set state(newState: State) {\n    this._state = newState;\n    this.dispatchEvent(new CustomEvent('state-changed', { detail: newState }));\n  }\n\n  async connect() {\n    if (this._state.type !== 'disconnected') {\n      throw new Error(`Unable to connect. Unexpected state ${this._state}`);\n    }\n\n    checkState(!this._adbDevice);\n\n    try {\n      this.state = { type: 'connecting' };\n      try {\n        this._adbDevice = await createAdbDevice(this.deviceId);\n      } catch (e) {\n        if (isNamedError(e, 'DeviceNotFound')) {\n          this.state = {\n            type: 'error',\n            detail: 'deviceNotFound',\n            message: `No device with serial ${this.deviceId} found`,\n          };\n          return;\n        }\n        throw e;\n      }\n      this._adbDevice.stateCallback = this._deviceStateChanges.bind(this);\n      await this._adbDevice.connect();\n\n      await this._deviceConnectedPromise;\n\n      checkState(!this._jdwp);\n      this._jdwp = new jdwp(this.processId, this._adbDevice);\n      let processName: string;\n      try {\n        processName = await this.readProcessName();\n      } catch (e) {\n        if (e instanceof Error && e.name === 'StreamDisconnectedError') {\n          // An invalid PID caused the stream to be closed (via remote command)\n          // upon trying to connect - this happens\n          this.state = {\n            type: 'error',\n            detail: 'processNotFound',\n            message: `Process with ID ${this.processId} not found`,\n          };\n          return;\n        }\n        throw e;\n      }\n\n      if (processName !== this.processName) {\n        this.state = {\n          type: 'error',\n          detail: 'processNotFound',\n          message: `Process ID ${this.processId} reported unexpected name (${processName}).`,\n        };\n        return;\n      }\n\n      await this.sendHandshake();\n\n      this.state = { type: 'connected' };\n    } catch (e) {\n      this.state = { type: 'error', detail: 'unknown', exception: e };\n      throw e;\n    }\n  }\n\n  async disconnect() {}\n\n  private _deviceStateChanges(state: ADB_DEVICE_STATE) {\n    let deviceConnected = false;\n    switch (state) {\n      case STATE_DISCONNECTED:\n        this._adbDevice?.closeAll();\n        this._adbDevice?.disconnect();\n        this._adbDevice = undefined;\n        this.state = { type: 'disconnected' };\n        break;\n      case STATE_CONNECTING:\n        this.state = { type: 'connecting' };\n        break;\n      case STATE_ERROR:\n        this.state = {\n          type: 'error',\n          detail: 'unknown',\n          exception: new Error('adbDevice reported error state'),\n        };\n        break;\n      case STATE_UNAUTHORIZED:\n        this.state = { type: 'unauthorized' };\n        break;\n      case STATE_CONNECTED_DEVICE:\n        this.state = { type: 'connecting' };\n        deviceConnected = true;\n        break;\n    }\n\n    if (deviceConnected && !this._deviceConnected) {\n      this._deviceConnected = true;\n      this._deviceConnectedPromise.accept();\n    } else if (!deviceConnected && this._deviceConnected) {\n      this._deviceConnected = false;\n      this._deviceConnectedPromise = deferred();\n    }\n  }\n\n  /** Sends an HELO packet to initialize the connection and read the process name. */\n  async readProcessName(): Promise<string> {\n    const jdwp = checkNotNull(this._jdwp);\n\n    const data = await jdwp.writeChunk('HELO', [0, 0, 0, 1]);\n    const serverVersion = data.readInt();\n    const processId = data.readInt();\n\n    const vmDescriptionLength = data.readInt();\n    const processNameLength = data.readInt();\n    const vmDescription = data.readStr(vmDescriptionLength);\n    const processName = data.readStr(processNameLength);\n\n    console.log(`Connected to process ${processId} (${processName})`);\n\n    return processName;\n  }\n\n  async sendHandshake(): Promise<void> {\n    const request = new motion_proto.MotionToolsRequest({\n      handshake: new motion_proto.HandshakeRequest({\n        window: new motion_proto.WindowIdentifier({\n          rootWindow: this.windowId,\n        }),\n        clientVersion: CLIENT_VERSION,\n      }),\n    });\n\n    const handshakeResponse = (await this.sendRequest(request)).handshake;\n    console.log(handshakeResponse);\n  }\n\n  async sendRequest(\n    request: motion_proto.MotionToolsRequest\n  ): Promise<motion_proto.MotionToolsResponse> {\n    const jdwp = checkNotNull(this._jdwp);\n\n    const requestBytes = motion_proto.MotionToolsRequest.encode(request).finish();\n\n    const responseStream = await jdwp.writeChunk(MOTION_TOOLS_CHUNK_TYPE, requestBytes);\n    if (responseStream.chunkType !== MOTION_TOOLS_CHUNK_TYPE) {\n      throw new Error(`Unexpected chunk type 0x${responseStream.chunkType.toString(16)}`);\n    }\n\n    // The responseStream is prefixed with chunk code and length, which have already been consumed\n    // by the jdwp.writeChunk's response read implementation. To grab the rest of the response as\n    // a byte array for protobuf parsing, this has to be skipped.\n    const responseProtoBytes = responseStream.data.slice(responseStream.pos);\n\n    return motion_proto.MotionToolsResponse.decode(responseProtoBytes);\n  }\n}\n\nasync function createAdbDevice(serial: string): Promise<AdbDevice> {\n  const devices = await navigator.usb.getDevices();\n  const actualDevice = devices.find(device => device.serialNumber === serial);\n\n  if (!actualDevice) {\n    throw namedError('DeviceNotFound', `No device with serial ${serial} found`);\n  }\n\n  const adbInterface = await retry(() => claimAdbInterface(actualDevice), {\n    delay: fixedRetryDelay(500),\n    attemptFailed: async (_, e) => {\n      console.log('Device is use, trying reset', e);\n      // Resetting the device will kill the connection of other tabs/clients.\n      await actualDevice.reset();\n    },\n  });\n\n  const adbDevice = new AdbDevice(actualDevice, adbInterface);\n  return adbDevice;\n}\n\nasync function claimAdbInterface(device: USBDevice): Promise<USBInterface> {\n  await device.open();\n  if (!device.configuration) {\n    await device.selectConfiguration(1);\n  }\n  const adbInterface = device.configuration?.interfaces?.find(\n    iface =>\n      iface.alternate.interfaceClass === ADB_INTERFACE_CLASS &&\n      iface.alternate.interfaceSubclass === ADB_INTERFACE_SUB_CLASS &&\n      iface.alternate.interfaceProtocol === ADB_INTERFACE_PROTOCOL\n  );\n\n  if (adbInterface == null) {\n    throw new NonRetryableError('Device does not support ADB interface');\n  }\n  await device.claimInterface(adbInterface.interfaceNumber);\n  return adbInterface;\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"deviceNotFound\" | \"processNotFound\" | \"windowNotFound\" | \"unknown\"",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "exception",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "OkState",
            "id": "interface-OkState-e9dc2b99151149854fb440608427911883da809105aa876b44b7bb7ded22746e6323c1b3294932cd3bcc7c16e0544ce92a63e114cc434cce5c340c47add95fbf",
            "file": "src/model/motion_connection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { fixedRetryDelay, NonRetryableError, retry } from '../utils/retry';\nimport { checkNotNull, checkState } from '../utils/preconditions';\nimport { isNamedError, namedError } from '../utils/utils';\nimport * as generated_proto from '../proto/motion.js';\nimport motion_proto = generated_proto.com.android.motion;\n\nconst CLIENT_VERSION = 1;\nconst MOTION_TOOLS_CHUNK_TYPE = getChunkType('MOTO');\n\nexport type State = OkState | ErrorState;\n\ninterface OkState {\n  type: 'disconnected' | 'connecting' | 'connected' | 'unauthorized';\n}\n\ninterface ErrorState {\n  type: 'error';\n  detail: 'deviceNotFound' | 'processNotFound' | 'windowNotFound' | 'unknown';\n  message?: string;\n  exception?: unknown;\n}\n\n/**\n * Connection description that can be serialized to a URL for bookmarkability.\n */\nexport class MotionConnection extends EventTarget {\n  private _adbDevice?: AdbDevice;\n  private _jdwp?: jdwp;\n\n  /**\n   * @param deviceId Device serial number\n   * @param processId Numeric process ID\n   * @param processName Name of the process\n   * @param windowId The window name being inspected\n   */\n  constructor(\n    public readonly deviceId: string,\n    public readonly processId: number,\n    public readonly processName: string,\n    public readonly windowId: string\n  ) {\n    super();\n  }\n\n  /**\n   * Parses  URL parameters to restore a bookmarked connection.\n   *\n   * @param urlParams from windwow.location.search\n   * @throws {Error} if url params are missing or wrongly formatted.\n   */\n  static createFromUrlParams(urlParams: URLSearchParams): MotionConnection {\n    function validatedParam(name: string, test: RegExp) {\n      const value = urlParams.get(name);\n      if (!value?.match(test)) {\n        throw namedError('InvalidUrlParams', `Invalid param ${name} (${value})`);\n      }\n      return value!;\n    }\n\n    const deviceId = validatedParam('serial', /[a-zA-Z0-9]{14}/);\n    const pid = Number.parseInt(validatedParam('pid', /\\d+/));\n    const processName = validatedParam('pname', /.+/);\n    const windowId = validatedParam('wid', /.+/);\n\n    return new MotionConnection(deviceId, pid, processName, windowId);\n  }\n\n  // Overall state of this motion connection.\n  // This is a composite of the ADB, JDWP and DDMS state.\n  private _state: State = { type: 'disconnected' };\n\n  // Whether the _adbDevice is in the connected state.\n  private _deviceConnected = false;\n  // Completes when as soon as `_deviceConnected === true`\n  private _deviceConnectedPromise = deferred<void>();\n\n  get state() {\n    return this._state;\n  }\n\n  private set state(newState: State) {\n    this._state = newState;\n    this.dispatchEvent(new CustomEvent('state-changed', { detail: newState }));\n  }\n\n  async connect() {\n    if (this._state.type !== 'disconnected') {\n      throw new Error(`Unable to connect. Unexpected state ${this._state}`);\n    }\n\n    checkState(!this._adbDevice);\n\n    try {\n      this.state = { type: 'connecting' };\n      try {\n        this._adbDevice = await createAdbDevice(this.deviceId);\n      } catch (e) {\n        if (isNamedError(e, 'DeviceNotFound')) {\n          this.state = {\n            type: 'error',\n            detail: 'deviceNotFound',\n            message: `No device with serial ${this.deviceId} found`,\n          };\n          return;\n        }\n        throw e;\n      }\n      this._adbDevice.stateCallback = this._deviceStateChanges.bind(this);\n      await this._adbDevice.connect();\n\n      await this._deviceConnectedPromise;\n\n      checkState(!this._jdwp);\n      this._jdwp = new jdwp(this.processId, this._adbDevice);\n      let processName: string;\n      try {\n        processName = await this.readProcessName();\n      } catch (e) {\n        if (e instanceof Error && e.name === 'StreamDisconnectedError') {\n          // An invalid PID caused the stream to be closed (via remote command)\n          // upon trying to connect - this happens\n          this.state = {\n            type: 'error',\n            detail: 'processNotFound',\n            message: `Process with ID ${this.processId} not found`,\n          };\n          return;\n        }\n        throw e;\n      }\n\n      if (processName !== this.processName) {\n        this.state = {\n          type: 'error',\n          detail: 'processNotFound',\n          message: `Process ID ${this.processId} reported unexpected name (${processName}).`,\n        };\n        return;\n      }\n\n      await this.sendHandshake();\n\n      this.state = { type: 'connected' };\n    } catch (e) {\n      this.state = { type: 'error', detail: 'unknown', exception: e };\n      throw e;\n    }\n  }\n\n  async disconnect() {}\n\n  private _deviceStateChanges(state: ADB_DEVICE_STATE) {\n    let deviceConnected = false;\n    switch (state) {\n      case STATE_DISCONNECTED:\n        this._adbDevice?.closeAll();\n        this._adbDevice?.disconnect();\n        this._adbDevice = undefined;\n        this.state = { type: 'disconnected' };\n        break;\n      case STATE_CONNECTING:\n        this.state = { type: 'connecting' };\n        break;\n      case STATE_ERROR:\n        this.state = {\n          type: 'error',\n          detail: 'unknown',\n          exception: new Error('adbDevice reported error state'),\n        };\n        break;\n      case STATE_UNAUTHORIZED:\n        this.state = { type: 'unauthorized' };\n        break;\n      case STATE_CONNECTED_DEVICE:\n        this.state = { type: 'connecting' };\n        deviceConnected = true;\n        break;\n    }\n\n    if (deviceConnected && !this._deviceConnected) {\n      this._deviceConnected = true;\n      this._deviceConnectedPromise.accept();\n    } else if (!deviceConnected && this._deviceConnected) {\n      this._deviceConnected = false;\n      this._deviceConnectedPromise = deferred();\n    }\n  }\n\n  /** Sends an HELO packet to initialize the connection and read the process name. */\n  async readProcessName(): Promise<string> {\n    const jdwp = checkNotNull(this._jdwp);\n\n    const data = await jdwp.writeChunk('HELO', [0, 0, 0, 1]);\n    const serverVersion = data.readInt();\n    const processId = data.readInt();\n\n    const vmDescriptionLength = data.readInt();\n    const processNameLength = data.readInt();\n    const vmDescription = data.readStr(vmDescriptionLength);\n    const processName = data.readStr(processNameLength);\n\n    console.log(`Connected to process ${processId} (${processName})`);\n\n    return processName;\n  }\n\n  async sendHandshake(): Promise<void> {\n    const request = new motion_proto.MotionToolsRequest({\n      handshake: new motion_proto.HandshakeRequest({\n        window: new motion_proto.WindowIdentifier({\n          rootWindow: this.windowId,\n        }),\n        clientVersion: CLIENT_VERSION,\n      }),\n    });\n\n    const handshakeResponse = (await this.sendRequest(request)).handshake;\n    console.log(handshakeResponse);\n  }\n\n  async sendRequest(\n    request: motion_proto.MotionToolsRequest\n  ): Promise<motion_proto.MotionToolsResponse> {\n    const jdwp = checkNotNull(this._jdwp);\n\n    const requestBytes = motion_proto.MotionToolsRequest.encode(request).finish();\n\n    const responseStream = await jdwp.writeChunk(MOTION_TOOLS_CHUNK_TYPE, requestBytes);\n    if (responseStream.chunkType !== MOTION_TOOLS_CHUNK_TYPE) {\n      throw new Error(`Unexpected chunk type 0x${responseStream.chunkType.toString(16)}`);\n    }\n\n    // The responseStream is prefixed with chunk code and length, which have already been consumed\n    // by the jdwp.writeChunk's response read implementation. To grab the rest of the response as\n    // a byte array for protobuf parsing, this has to be skipped.\n    const responseProtoBytes = responseStream.data.slice(responseStream.pos);\n\n    return motion_proto.MotionToolsResponse.decode(responseProtoBytes);\n  }\n}\n\nasync function createAdbDevice(serial: string): Promise<AdbDevice> {\n  const devices = await navigator.usb.getDevices();\n  const actualDevice = devices.find(device => device.serialNumber === serial);\n\n  if (!actualDevice) {\n    throw namedError('DeviceNotFound', `No device with serial ${serial} found`);\n  }\n\n  const adbInterface = await retry(() => claimAdbInterface(actualDevice), {\n    delay: fixedRetryDelay(500),\n    attemptFailed: async (_, e) => {\n      console.log('Device is use, trying reset', e);\n      // Resetting the device will kill the connection of other tabs/clients.\n      await actualDevice.reset();\n    },\n  });\n\n  const adbDevice = new AdbDevice(actualDevice, adbInterface);\n  return adbDevice;\n}\n\nasync function claimAdbInterface(device: USBDevice): Promise<USBInterface> {\n  await device.open();\n  if (!device.configuration) {\n    await device.selectConfiguration(1);\n  }\n  const adbInterface = device.configuration?.interfaces?.find(\n    iface =>\n      iface.alternate.interfaceClass === ADB_INTERFACE_CLASS &&\n      iface.alternate.interfaceSubclass === ADB_INTERFACE_SUB_CLASS &&\n      iface.alternate.interfaceProtocol === ADB_INTERFACE_PROTOCOL\n  );\n\n  if (adbInterface == null) {\n    throw new NonRetryableError('Device does not support ADB interface');\n  }\n  await device.claimInterface(adbInterface.interfaceNumber);\n  return adbInterface;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"disconnected\" | \"connecting\" | \"connected\" | \"unauthorized\"",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "VideoSource",
            "id": "interface-VideoSource-aa77dde5a50ee08d1bbd0a22f3d5d96ff46e3735e2d438be65762e02f88b0dc52118c5be433bf5d13145ce435cbba89fd70207e23e20c2dc56a3590e17f2a790",
            "file": "src/model/video/video-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface VideoSource {\n  readonly aspectRatio: number;\n  readonly width: number;\n  readonly height: number\n}\n",
            "properties": [
                {
                    "name": "aspectRatio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ProgressTracker",
            "id": "injectable-ProgressTracker-93c1e826c6080b170d568aa91671f712693d03e821b58d73bad23277a94bc0141663c33261da8403fc087692db2c37af655aff028e6d0713119437142f086b14",
            "file": "src/utils/progress.ts",
            "properties": [
                {
                    "name": "progressCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "beginProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Marks the beginning of the progress.\n\n Must be followed by exactly one endProgress` call.\n",
                    "description": "<p> Marks the beginning of the progress.</p>\n<p> Must be followed by exactly one endProgress` call.</p>\n"
                },
                {
                    "name": "endProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Ends a previously started progress.\n",
                    "description": "<p> Ends a previously started progress.</p>\n"
                },
                {
                    "name": "trackPromise",
                    "args": [
                        {
                            "name": "promise",
                            "type": "Promise<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "promise",
                            "type": "Promise<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Tracks activity that should show a progress bar.</p>\n",
            "rawdescription": "\n\nTracks activity that should show a progress bar.\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Tracks activity that should show a progress bar.\n */\n@Injectable()\nexport class ProgressTracker extends EventTarget {\n  private progressCount = 0;\n\n  get isActive() {\n    return this.progressCount > 0;\n  }\n\n  trackPromise<T>(promise: Promise<T>): Promise<T> {\n    this.beginProgress();\n    promise.finally(() => this.endProgress());\n    return promise;\n  }\n\n  /**\n   *  Marks the beginning of the progress.\n   *\n   *  Must be followed by exactly one endProgress` call.\n   */\n  beginProgress() {\n    this.progressCount++;\n    if (this.progressCount == 1) {\n      this.dispatchEvent(new Event('progress-started'));\n    }\n  }\n\n  /**\n   *  Ends a previously started progress.\n   */\n  endProgress() {\n    console.assert(this.progressCount > 0);\n    this.progressCount++;\n    if (this.progressCount == 0) {\n      this.dispatchEvent(new Event('progress-ended'));\n    }\n  }\n}\n",
            "accessors": {
                "isActive": {
                    "name": "isActive",
                    "getSignature": {
                        "name": "isActive",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "extends": "EventTarget",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Deferred",
            "id": "class-Deferred-cdce8deb5f345e0bd4afcfc8597b3c6e3d04533def24f87bbb11445bd66b8fa99c4514d06b30537117f3e6b60dbe5bebba8b855325305a416a4a8f6cb98c9199",
            "file": "src/utils/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export function delay(timeMs: number): Promise<void> {\n  return new Promise<void>(complete => setTimeout(complete, timeMs));\n}\n\n/**\n * A `Promise` to be completed\n */\nexport class Deferred<T> extends Promise<T> {\n  readonly resolve: (value: T) => void;\n  readonly reject: (reason?: any) => void;\n\n  constructor() {\n    let capturedResolve: (value: T) => void;\n    let capturedReject: (reason?: any) => void;\n\n    super((resolve, reject) => {\n      capturedResolve = resolve;\n      capturedReject = reject;\n    });\n\n    this.resolve = capturedResolve!;\n    this.reject = capturedReject!;\n  }\n}\n\nexport function namedError(name: string, message?: string): Error {\n  const result = new Error(message);\n  result.name = name;\n  return result;\n}\n\nexport function isNamedError(e: unknown, name: string): e is Error {\n  return e instanceof Error && e.name === name;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "properties": [
                {
                    "name": "reject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "resolve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "description": "<p>A <code>Promise</code> to be completed</p>\n",
            "rawdescription": "\n\nA `Promise` to be completed\n",
            "methods": [],
            "indexSignatures": [],
            "extends": "Promise",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Disposer",
            "id": "class-Disposer-e5e8a9b5a5baaf82641bc5748ac6b4400d80a20940ba167846e451c164561dfcb9b9ec4e3bb60622360efd1979ac6992794544bc48d8b225d9b4ca96259dfe88",
            "file": "src/utils/disposer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export type DisposableFn = () => void;\n\n/** Objects disposable with an `Disposer`. */\nexport interface Disposable {\n  dispose(): void;\n}\n\n/**\n * Tracks cleanup code and runs it upon calling `dispose`.\n *\n * By default, the disposer must not be used after it has been disposed. This\n * helps avoid memory leaks by preventing accidental registration of cleanup\n * code. Create the Disposer with `multiShot` set to\n */\nexport class Disposer implements Disposable {\n  // null after a one-shot disposer was disposed.\n  private _disposables?: Array<DisposableFn> = [];\n\n  /**\n   * @param multiShot Whether the disposer can be used for multiple dispose\n   * cycles.\n   */\n  constructor(private multiShot: boolean = false) {}\n\n  /**\n   * Registers the function to be called upon `dispose()`.\n   *\n   * Must not be called on a one-shot Disposer after it has been disposed.\n   */\n  addFunction(disposable: DisposableFn) {\n    if (!this._disposables) {\n      throw new Error('Adding new disposabled to already disposed one-shot disposer');\n    }\n    this._disposables!.push(disposable);\n  }\n\n  /**\n   * Registers the listener at the `eventTarget` and unregisters it upon\n   * `dispose()`.\n   *\n   * Must not be called on a one-shot Disposer after it has been disposed.\n   */\n  addListener(\n    eventTarget: EventTarget,\n    type: string,\n    callback: EventListenerOrEventListenerObject,\n    options?: AddEventListenerOptions | boolean\n  ) {\n    this.addFunction(() => eventTarget.removeEventListener(type, callback, options));\n    eventTarget.addEventListener(type, callback, options);\n  }\n\n  /**\n   * Registers the Disposable to be cleaned up upon `dispose()`.\n   *\n   * Must not be called on a one-shot Disposer after it has been disposed.\n   */\n  addDisposable(disposable: Disposable) {\n    this.addFunction(disposable.dispose.bind(disposable));\n  }\n\n  /**\n   * Disposes all registered cleanup code.\n   *\n   * Must be called exactly once for one-shot Disposers, or at least once for\n   * multi-shot disposers.\n   */\n  dispose(): void {\n    if (!this._disposables) {\n      throw new Error('dispose() an already disposed one-shot disposer.');\n    }\n\n    const toDispose = this._disposables;\n    this._disposables = this.multiShot ? [] : undefined;\n    for (const disposable of toDispose) {\n      disposable();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>cycles.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "multiShot",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 34,
                "rawdescription": "\n\ncycles.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1236,
                            "end": 1245,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "multiShot"
                        },
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "pos": 1230,
                            "end": 1235,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Whether the disposer can be used for multiple dispose\ncycles.</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "_disposables",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<DisposableFn>",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "description": "<p>Tracks cleanup code and runs it upon calling <code>dispose</code>.</p>\n<p>By default, the disposer must not be used after it has been disposed. This\nhelps avoid memory leaks by preventing accidental registration of cleanup\ncode. Create the Disposer with <code>multiShot</code> set to</p>\n",
            "rawdescription": "\n\nTracks cleanup code and runs it upon calling `dispose`.\n\nBy default, the disposer must not be used after it has been disposed. This\nhelps avoid memory leaks by preventing accidental registration of cleanup\ncode. Create the Disposer with `multiShot` set to\n",
            "methods": [
                {
                    "name": "addDisposable",
                    "args": [
                        {
                            "name": "disposable",
                            "type": "Disposable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters the Disposable to be cleaned up upon `dispose()`.\n\nMust not be called on a one-shot Disposer after it has been disposed.\n",
                    "description": "<p>Registers the Disposable to be cleaned up upon <code>dispose()</code>.</p>\n<p>Must not be called on a one-shot Disposer after it has been disposed.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "disposable",
                            "type": "Disposable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addFunction",
                    "args": [
                        {
                            "name": "disposable",
                            "type": "DisposableFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters the function to be called upon `dispose()`.\n\nMust not be called on a one-shot Disposer after it has been disposed.\n",
                    "description": "<p>Registers the function to be called upon <code>dispose()</code>.</p>\n<p>Must not be called on a one-shot Disposer after it has been disposed.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "disposable",
                            "type": "DisposableFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addListener",
                    "args": [
                        {
                            "name": "eventTarget",
                            "type": "EventTarget",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "EventListenerOrEventListenerObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "AddEventListenerOptions | boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters the listener at the `eventTarget` and unregisters it upon\n`dispose()`.\n\nMust not be called on a one-shot Disposer after it has been disposed.\n",
                    "description": "<p>Registers the listener at the <code>eventTarget</code> and unregisters it upon\n<code>dispose()</code>.</p>\n<p>Must not be called on a one-shot Disposer after it has been disposed.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "eventTarget",
                            "type": "EventTarget",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "EventListenerOrEventListenerObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "AddEventListenerOptions | boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisposes all registered cleanup code.\n\nMust be called exactly once for one-shot Disposers, or at least once for\nmulti-shot disposers.\n",
                    "description": "<p>Disposes all registered cleanup code.</p>\n<p>Must be called exactly once for one-shot Disposers, or at least once for\nmulti-shot disposers.</p>\n"
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Disposable"
            ]
        },
        {
            "name": "MotionConnection",
            "id": "class-MotionConnection-e9dc2b99151149854fb440608427911883da809105aa876b44b7bb7ded22746e6323c1b3294932cd3bcc7c16e0544ce92a63e114cc434cce5c340c47add95fbf",
            "file": "src/model/motion_connection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { fixedRetryDelay, NonRetryableError, retry } from '../utils/retry';\nimport { checkNotNull, checkState } from '../utils/preconditions';\nimport { isNamedError, namedError } from '../utils/utils';\nimport * as generated_proto from '../proto/motion.js';\nimport motion_proto = generated_proto.com.android.motion;\n\nconst CLIENT_VERSION = 1;\nconst MOTION_TOOLS_CHUNK_TYPE = getChunkType('MOTO');\n\nexport type State = OkState | ErrorState;\n\ninterface OkState {\n  type: 'disconnected' | 'connecting' | 'connected' | 'unauthorized';\n}\n\ninterface ErrorState {\n  type: 'error';\n  detail: 'deviceNotFound' | 'processNotFound' | 'windowNotFound' | 'unknown';\n  message?: string;\n  exception?: unknown;\n}\n\n/**\n * Connection description that can be serialized to a URL for bookmarkability.\n */\nexport class MotionConnection extends EventTarget {\n  private _adbDevice?: AdbDevice;\n  private _jdwp?: jdwp;\n\n  /**\n   * @param deviceId Device serial number\n   * @param processId Numeric process ID\n   * @param processName Name of the process\n   * @param windowId The window name being inspected\n   */\n  constructor(\n    public readonly deviceId: string,\n    public readonly processId: number,\n    public readonly processName: string,\n    public readonly windowId: string\n  ) {\n    super();\n  }\n\n  /**\n   * Parses  URL parameters to restore a bookmarked connection.\n   *\n   * @param urlParams from windwow.location.search\n   * @throws {Error} if url params are missing or wrongly formatted.\n   */\n  static createFromUrlParams(urlParams: URLSearchParams): MotionConnection {\n    function validatedParam(name: string, test: RegExp) {\n      const value = urlParams.get(name);\n      if (!value?.match(test)) {\n        throw namedError('InvalidUrlParams', `Invalid param ${name} (${value})`);\n      }\n      return value!;\n    }\n\n    const deviceId = validatedParam('serial', /[a-zA-Z0-9]{14}/);\n    const pid = Number.parseInt(validatedParam('pid', /\\d+/));\n    const processName = validatedParam('pname', /.+/);\n    const windowId = validatedParam('wid', /.+/);\n\n    return new MotionConnection(deviceId, pid, processName, windowId);\n  }\n\n  // Overall state of this motion connection.\n  // This is a composite of the ADB, JDWP and DDMS state.\n  private _state: State = { type: 'disconnected' };\n\n  // Whether the _adbDevice is in the connected state.\n  private _deviceConnected = false;\n  // Completes when as soon as `_deviceConnected === true`\n  private _deviceConnectedPromise = deferred<void>();\n\n  get state() {\n    return this._state;\n  }\n\n  private set state(newState: State) {\n    this._state = newState;\n    this.dispatchEvent(new CustomEvent('state-changed', { detail: newState }));\n  }\n\n  async connect() {\n    if (this._state.type !== 'disconnected') {\n      throw new Error(`Unable to connect. Unexpected state ${this._state}`);\n    }\n\n    checkState(!this._adbDevice);\n\n    try {\n      this.state = { type: 'connecting' };\n      try {\n        this._adbDevice = await createAdbDevice(this.deviceId);\n      } catch (e) {\n        if (isNamedError(e, 'DeviceNotFound')) {\n          this.state = {\n            type: 'error',\n            detail: 'deviceNotFound',\n            message: `No device with serial ${this.deviceId} found`,\n          };\n          return;\n        }\n        throw e;\n      }\n      this._adbDevice.stateCallback = this._deviceStateChanges.bind(this);\n      await this._adbDevice.connect();\n\n      await this._deviceConnectedPromise;\n\n      checkState(!this._jdwp);\n      this._jdwp = new jdwp(this.processId, this._adbDevice);\n      let processName: string;\n      try {\n        processName = await this.readProcessName();\n      } catch (e) {\n        if (e instanceof Error && e.name === 'StreamDisconnectedError') {\n          // An invalid PID caused the stream to be closed (via remote command)\n          // upon trying to connect - this happens\n          this.state = {\n            type: 'error',\n            detail: 'processNotFound',\n            message: `Process with ID ${this.processId} not found`,\n          };\n          return;\n        }\n        throw e;\n      }\n\n      if (processName !== this.processName) {\n        this.state = {\n          type: 'error',\n          detail: 'processNotFound',\n          message: `Process ID ${this.processId} reported unexpected name (${processName}).`,\n        };\n        return;\n      }\n\n      await this.sendHandshake();\n\n      this.state = { type: 'connected' };\n    } catch (e) {\n      this.state = { type: 'error', detail: 'unknown', exception: e };\n      throw e;\n    }\n  }\n\n  async disconnect() {}\n\n  private _deviceStateChanges(state: ADB_DEVICE_STATE) {\n    let deviceConnected = false;\n    switch (state) {\n      case STATE_DISCONNECTED:\n        this._adbDevice?.closeAll();\n        this._adbDevice?.disconnect();\n        this._adbDevice = undefined;\n        this.state = { type: 'disconnected' };\n        break;\n      case STATE_CONNECTING:\n        this.state = { type: 'connecting' };\n        break;\n      case STATE_ERROR:\n        this.state = {\n          type: 'error',\n          detail: 'unknown',\n          exception: new Error('adbDevice reported error state'),\n        };\n        break;\n      case STATE_UNAUTHORIZED:\n        this.state = { type: 'unauthorized' };\n        break;\n      case STATE_CONNECTED_DEVICE:\n        this.state = { type: 'connecting' };\n        deviceConnected = true;\n        break;\n    }\n\n    if (deviceConnected && !this._deviceConnected) {\n      this._deviceConnected = true;\n      this._deviceConnectedPromise.accept();\n    } else if (!deviceConnected && this._deviceConnected) {\n      this._deviceConnected = false;\n      this._deviceConnectedPromise = deferred();\n    }\n  }\n\n  /** Sends an HELO packet to initialize the connection and read the process name. */\n  async readProcessName(): Promise<string> {\n    const jdwp = checkNotNull(this._jdwp);\n\n    const data = await jdwp.writeChunk('HELO', [0, 0, 0, 1]);\n    const serverVersion = data.readInt();\n    const processId = data.readInt();\n\n    const vmDescriptionLength = data.readInt();\n    const processNameLength = data.readInt();\n    const vmDescription = data.readStr(vmDescriptionLength);\n    const processName = data.readStr(processNameLength);\n\n    console.log(`Connected to process ${processId} (${processName})`);\n\n    return processName;\n  }\n\n  async sendHandshake(): Promise<void> {\n    const request = new motion_proto.MotionToolsRequest({\n      handshake: new motion_proto.HandshakeRequest({\n        window: new motion_proto.WindowIdentifier({\n          rootWindow: this.windowId,\n        }),\n        clientVersion: CLIENT_VERSION,\n      }),\n    });\n\n    const handshakeResponse = (await this.sendRequest(request)).handshake;\n    console.log(handshakeResponse);\n  }\n\n  async sendRequest(\n    request: motion_proto.MotionToolsRequest\n  ): Promise<motion_proto.MotionToolsResponse> {\n    const jdwp = checkNotNull(this._jdwp);\n\n    const requestBytes = motion_proto.MotionToolsRequest.encode(request).finish();\n\n    const responseStream = await jdwp.writeChunk(MOTION_TOOLS_CHUNK_TYPE, requestBytes);\n    if (responseStream.chunkType !== MOTION_TOOLS_CHUNK_TYPE) {\n      throw new Error(`Unexpected chunk type 0x${responseStream.chunkType.toString(16)}`);\n    }\n\n    // The responseStream is prefixed with chunk code and length, which have already been consumed\n    // by the jdwp.writeChunk's response read implementation. To grab the rest of the response as\n    // a byte array for protobuf parsing, this has to be skipped.\n    const responseProtoBytes = responseStream.data.slice(responseStream.pos);\n\n    return motion_proto.MotionToolsResponse.decode(responseProtoBytes);\n  }\n}\n\nasync function createAdbDevice(serial: string): Promise<AdbDevice> {\n  const devices = await navigator.usb.getDevices();\n  const actualDevice = devices.find(device => device.serialNumber === serial);\n\n  if (!actualDevice) {\n    throw namedError('DeviceNotFound', `No device with serial ${serial} found`);\n  }\n\n  const adbInterface = await retry(() => claimAdbInterface(actualDevice), {\n    delay: fixedRetryDelay(500),\n    attemptFailed: async (_, e) => {\n      console.log('Device is use, trying reset', e);\n      // Resetting the device will kill the connection of other tabs/clients.\n      await actualDevice.reset();\n    },\n  });\n\n  const adbDevice = new AdbDevice(actualDevice, adbInterface);\n  return adbDevice;\n}\n\nasync function claimAdbInterface(device: USBDevice): Promise<USBInterface> {\n  await device.open();\n  if (!device.configuration) {\n    await device.selectConfiguration(1);\n  }\n  const adbInterface = device.configuration?.interfaces?.find(\n    iface =>\n      iface.alternate.interfaceClass === ADB_INTERFACE_CLASS &&\n      iface.alternate.interfaceSubclass === ADB_INTERFACE_SUB_CLASS &&\n      iface.alternate.interfaceProtocol === ADB_INTERFACE_PROTOCOL\n  );\n\n  if (adbInterface == null) {\n    throw new NonRetryableError('Device does not support ADB interface');\n  }\n  await device.claimInterface(adbInterface.interfaceNumber);\n  return adbInterface;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "deviceId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "processId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "processName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "windowId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "rawdescription": "\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1510,
                            "end": 1518,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "deviceId"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1504,
                            "end": 1509,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Device serial number</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1552,
                            "end": 1561,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "processId"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1546,
                            "end": 1551,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Numeric process ID</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1593,
                            "end": 1604,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "processName"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1587,
                            "end": 1592,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Name of the process</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1637,
                            "end": 1645,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "windowId"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1631,
                            "end": 1636,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The window name being inspected</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "_adbDevice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdbDevice",
                    "optional": true,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_deviceConnected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_deviceConnectedPromise",
                    "defaultValue": "deferred<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_jdwp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "jdwp",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "{ type: 'disconnected' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deviceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "Device serial number",
                    "line": 53,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "processId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "Numeric process ID",
                    "line": 54,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "processName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "Name of the process",
                    "line": 55,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "windowId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "The window name being inspected",
                    "line": 56,
                    "modifierKind": [
                        123,
                        144
                    ]
                }
            ],
            "description": "<p>Connection description that can be serialized to a URL for bookmarkability.</p>\n",
            "rawdescription": "\n\nConnection description that can be serialized to a URL for bookmarkability.\n",
            "methods": [
                {
                    "name": "_deviceStateChanges",
                    "args": [
                        {
                            "name": "state",
                            "type": "ADB_DEVICE_STATE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ADB_DEVICE_STATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "createFromUrlParams",
                    "args": [
                        {
                            "name": "urlParams",
                            "type": "URLSearchParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MotionConnection",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParses  URL parameters to restore a bookmarked connection.\n\n",
                    "description": "<p>Parses  URL parameters to restore a bookmarked connection.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1965,
                                "end": 1974,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "urlParams"
                            },
                            "type": "URLSearchParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1959,
                                "end": 1964,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>from windwow.location.search</p>\n"
                        }
                    ]
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "readProcessName",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSends an HELO packet to initialize the connection and read the process name.",
                    "description": "<p>Sends an HELO packet to initialize the connection and read the process name.</p>\n",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "sendHandshake",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "sendRequest",
                    "args": [
                        {
                            "name": "request",
                            "type": "motion_proto.MotionToolsRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<motion_proto.MotionToolsResponse>",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "motion_proto.MotionToolsRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "EventTarget",
            "accessors": {
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newState",
                                "type": "State",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "jsdoctags": [
                            {
                                "name": "newState",
                                "type": "State",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NonRetryableError",
            "id": "class-NonRetryableError-0307c1672c98b92e22119d17885d92f90728a00371b0ab0740198716a52b5b05b2ed303ebbfc80de004cef33589bf883e41a978bf94bb40b6e6fb5c84bac162e",
            "file": "src/utils/retry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { delay } from './utils';\n\n/** Starts the promise to try executing. */\ntype RetryableFunction<T> = () => Promise<T>;\n\n/** Determines whether a next retry should be attempted. */\ntype RetryIf = (attempt: number, error: unknown) => boolean;\n\n/** A `RetryIf` that limits the number of attempts to `maxAttempts`. */\nexport function maxAttempts(maxAttempts: number): RetryIf {\n  console.assert(maxAttempts > 0);\n  return retry => retry < maxAttempts - 1;\n}\n\n/**\n * Delays the next retry, after failing the `attempt`th attempt.\n */\ntype RetryDelay = (attempt: number, error: unknown) => Promise<void>;\n\n/** A `RetryDelay` that pauses the fixed amount of `delayMs` between reties */\nexport function fixedRetryDelay(delayMs: number): RetryDelay {\n  return () => delay(delayMs);\n}\n\n/** Callback after the `attempt`th attempt failed with `error` */\ntype AttemptFailed = (attempt: number, error: unknown) => Promise<void>;\n\n/**\n * Awaits the completion of the `Promise` returned by `code`, and retries if the\n * promise fails to complete.\n */\nexport async function retry<T>(\n  code: RetryableFunction<T>,\n  options?: {\n    /** Whether to retry the failed invocation (default maxAttempts(3)) */\n    shouldRerty?: RetryIf;\n    /** Delays the next retry (defaults to a fixed delay of 100ms) */\n    delay?: RetryDelay;\n    /** When an invocation failed. */\n    attemptFailed?: AttemptFailed;\n  }\n): Promise<T> {\n  const shouldRerty = options?.shouldRerty || maxAttempts(3);\n  const delay = options?.delay || fixedRetryDelay(100);\n  const attemptFailed = options?.attemptFailed || (() => Promise.resolve());\n\n  for (let attempt = 0; ; attempt++) {\n    try {\n      return await code();\n    } catch (e: unknown) {\n      if (e instanceof NonRetryableError) {\n        throw e;\n      }\n\n      await attemptFailed(attempt, e);\n\n      if (shouldRerty(attempt, e)) {\n        await delay(attempt, e);\n      } else {\n        // permanently fail.\n        throw e;\n      }\n    }\n  }\n}\n\n/** Promises failing with this type of error will not be retried by `retry`. */\nexport class NonRetryableError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "description": "<p>Promises failing with this type of error will not be retried by <code>retry</code>.</p>\n",
            "rawdescription": "\nPromises failing with this type of error will not be retried by `retry`.",
            "methods": [],
            "indexSignatures": [],
            "extends": "Error",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9da70685db5a0322534da47ef26c849250bdb6700b53835e7964cceee7330663aed41b2006cbfce29ea6bf80f6756522e59ba26b18e29c1e2f5828cb0137867b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disposer",
                    "defaultValue": "new Disposer()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Disposer } from '../utils/disposer';\nimport { MotionConnection, State } from '../model/motion_connection';\nimport { ProgressTracker } from '../utils/progress';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  constructor(\n    private _motionConnection: MotionConnection,\n    private _progressTracker: ProgressTracker\n  ) {}\n\n  private readonly _disposer = new Disposer();\n\n  ngOnInit(): void {\n    this._motionConnection.connect();\n  }\n\n  ngOnDestroy() {\n    this._motionConnection.disconnect();\n  }\n\n  get connectionStateIcon(): string {\n    return ConnectionStateIndicator[this._motionConnection.state.type].icon;\n  }\n\n  get connectionStateLabel(): string {\n    return ConnectionStateIndicator[this._motionConnection.state.type].label;\n  }\n\n  get showProgress() {\n    return this._progressTracker.isActive;\n  }\n}\n\nconst ConnectionStateIndicator: Record<State['type'], { label: string; icon: string }> = {\n  disconnected: { label: 'Disconnected', icon: 'usb_off' },\n  connecting: { label: 'Connecting...', icon: 'usb' },\n  connected: { label: 'Connected', icon: 'usb' },\n  error: { label: 'Error', icon: 'error_outline' },\n  unauthorized: { label: 'Unauthorized', icon: 'warning_amber' },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*!\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n:host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  align-content: stretch;\n  align-items: stretch;\n}\n\n.header-spacer {\n  flex: 1 1 auto;\n}\n\nmat-toolbar {\n  flex: 0 0 64px;\n}\n\n.content {\n  display: flex;\n  flex-grow: 1;\n  overflow: scroll;\n  align-content: stretch;\n}\n\napp-motion-viewer {\n  flex-grow: 1;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_motionConnection",
                        "type": "MotionConnection",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_progressTracker",
                        "type": "ProgressTracker",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "_motionConnection",
                        "type": "MotionConnection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_progressTracker",
                        "type": "ProgressTracker",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "connectionStateIcon": {
                    "name": "connectionStateIcon",
                    "getSignature": {
                        "name": "connectionStateIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 43
                    }
                },
                "connectionStateLabel": {
                    "name": "connectionStateLabel",
                    "getSignature": {
                        "name": "connectionStateLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 47
                    }
                },
                "showProgress": {
                    "name": "showProgress",
                    "getSignature": {
                        "name": "showProgress",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                }
            },
            "templateData": "<!--\n  ~ Copyright 2022 Google LLC\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<mat-toolbar color=\"primary\">\n  <span>Motion</span>\n\n  <span class=\"header-spacer\"></span>\n  <button mat-icon-button [matMenuTriggerFor]=\"connectionMenu\">\n    <mat-icon>{{ connectionStateIcon }}</mat-icon>\n  </button>\n  <mat-menu #connectionMenu=\"matMenu\">\n    <button mat-menu-item>\n      <mat-icon>dialpad</mat-icon>\n      <span>Redial</span>\n    </button>\n    <button mat-menu-item disabled>\n      <mat-icon>voicemail</mat-icon>\n      <span>Check voice mail</span>\n    </button>\n    <button mat-menu-item>\n      <mat-icon>notifications_off</mat-icon>\n      <span>Disable alerts</span>\n    </button>\n  </mat-menu>\n</mat-toolbar>\n<mat-progress-bar *ngIf=\"showProgress\"></mat-progress-bar>\n<div class=\"content mat-app-background\">\n  <app-motion-viewer></app-motion-viewer>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "MotionViewerComponent",
            "id": "component-MotionViewerComponent-88ff360e231763d0c2cf958284dcc0ccabe47744bedf53296e5b183312e9a48ac3551ac70b6d5720918c5e343d8777850377dbdf7696958be8c6c0d0e67d73ed",
            "file": "src/app/motion-viewer/motion-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-motion-viewer",
            "styleUrls": [
                "./motion-viewer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./motion-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-motion-viewer',\n  templateUrl: './motion-viewer.component.html',\n  styleUrls: ['./motion-viewer.component.scss'],\n})\nexport class MotionViewerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*!\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n:host {\n  display: flex;\n  flex-direction: row;\n  padding: 8px;\n  gap: 8px;\n}\n\n.left-panel {\n  display: flex;\n  flex-direction: column;\n  flex: 0 1 33%;\n  align-content: stretch;\n  align-items: stretch;\n}\n\n.right-panel {\n  display: flex;\n  flex-direction: column;\n  flex: 1 0 300px;\n  gap: 8px;\n}\n\nui-video-view {\n  flex-grow: 1;\n}\n\n\nui-timeline-view {\n  flex-grow: 1;\n}\n",
                    "styleUrl": "./motion-viewer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--\n  ~ Copyright 2022 Google LLC\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<div class=\"left-panel\">\n  <ui-video-view></ui-video-view>\n</div>\n<div class=\"right-panel\">\n  <ui-oscilloscope-config-view></ui-oscilloscope-config-view>\n  <ui-timeline-view></ui-timeline-view>\n</div>\n"
        },
        {
            "name": "OscilloscopeConfigViewComponent",
            "id": "component-OscilloscopeConfigViewComponent-ea0475da7a1c189a2b63daa5cddd10e0dea601406f6486a00edce642e3373b3e6f6e386feb8075d696cdffc693a83b4cc5ea92c28e09a699e95e5cac110bfad2",
            "file": "src/ui/oscilloscope-config-view/oscilloscope-config-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-oscilloscope-config-view",
            "styleUrls": [
                "./oscilloscope-config-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./oscilloscope-config-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ui-oscilloscope-config-view',\n  templateUrl: './oscilloscope-config-view.component.html',\n  styleUrls: ['./oscilloscope-config-view.component.scss'],\n})\nexport class OscilloscopeConfigViewComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  get triggerName(): String {\n    return 'none';\n  }\n  get gestureName(): String {\n    return 'none';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*!\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n",
                    "styleUrl": "./oscilloscope-config-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "triggerName": {
                    "name": "triggerName",
                    "getSignature": {
                        "name": "triggerName",
                        "type": "",
                        "returnType": "String",
                        "line": 29
                    }
                },
                "gestureName": {
                    "name": "gestureName",
                    "getSignature": {
                        "name": "gestureName",
                        "type": "",
                        "returnType": "String",
                        "line": 32
                    }
                }
            },
            "templateData": "<!--\n  ~ Copyright 2022 Google LLC\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<mat-accordion multi>\n  <mat-expansion-panel hideToggle>\n    <mat-expansion-panel-header>\n      <mat-panel-title> Trigger </mat-panel-title>\n      <mat-panel-description>\n        {{ triggerName }}\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <p>Configure trigger</p>\n  </mat-expansion-panel>\n\n  <mat-expansion-panel hideToggle>\n    <mat-expansion-panel-header>\n      <mat-panel-title> Gesture </mat-panel-title>\n      <mat-panel-description>\n        {{ gestureName }}\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <p>Configure gesture</p>\n  </mat-expansion-panel>\n</mat-accordion>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "TimelineViewComponent",
            "id": "component-TimelineViewComponent-f1e6857d3a8801b1d1e782ab1d1b53aaef73b2820ae3cc7e445df54c97bdae219b6283dc9e06934305e786836b7b78d8acf2e2a4633cf34036bf50f6d360c12e",
            "file": "src/ui/timeline-view/timeline-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-timeline-view",
            "styleUrls": [
                "./timeline-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ui-timeline-view',\n  templateUrl: './timeline-view.component.html',\n  styleUrls: ['./timeline-view.component.scss'],\n})\nexport class TimelineViewComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*!\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n",
                    "styleUrl": "./timeline-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "⌛timeline⌛<!--\n  ~ Copyright 2022 Google LLC\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n"
        },
        {
            "name": "VideoViewComponent",
            "id": "component-VideoViewComponent-b5666b8318cce17c795664cff8f4e53c51c922627ecc9e98465dbc909ff03d51e301bbeca5fd114442f3aeaef5d3e2ba72bb4131504726b875dfc3659ba53c3a",
            "file": "src/ui/video-view/video-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-video-view",
            "styleUrls": [
                "./video-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./video-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "VideoSource",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { VideoSource } from '../../model/video/video-source';\n\n@Component({\n  selector: 'ui-video-view',\n  templateUrl: './video-view.component.html',\n  styleUrls: ['./video-view.component.scss'],\n})\nexport class VideoViewComponent {\n  constructor() {}\n\n  @Input()\n  source?: VideoSource;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*!\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n:host {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.no-source {\n  align-self: center;\n  font-size: 96px;\n}\n",
                    "styleUrl": "./video-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "templateData": "<!--\n  ~ Copyright 2022 Google LLC\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<div *ngIf=\"!source\" class=\"no-source\" label=\"No video source!\">📺</div>\n<div *ngIf=\"source\">\n\n  <canvas></canvas>\n\n\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-9561460c01aa8712943bb80002740759eb0eb4ae00cd88657810b20f48c210c23e77a7ee41d91c34389ebe889ef2b0ccc68b0a799d11162384654be7e60fda64",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { MotionConnection } from '../model/motion_connection';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { ProgressTracker } from '../utils/progress';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MotionViewerComponent } from './motion-viewer/motion-viewer.component';\nimport { UiModule } from '../ui/ui.module';\n\n@NgModule({\n  declarations: [AppComponent, MotionViewerComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatProgressBarModule,\n    MatButtonModule,\n    MatMenuModule,\n    UiModule,\n  ],\n  providers: [\n    {\n      provide: MotionConnection,\n      useFactory: () =>\n        MotionConnection.createFromUrlParams(new URLSearchParams(window.location.search)),\n    },\n    ProgressTracker,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ProgressTracker"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MotionViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiModule",
            "id": "module-UiModule-3007817d0c8eebf94856fc58c46992e5ef2aeb9d8b8bfddb59b92911b67d374c065fe04bac867a0a6c31dcfb97958f378aee42fc7c05de5849660d61f643f0ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/ui/ui.module.ts",
            "methods": [],
            "sourceCode": "/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { VideoViewComponent } from './video-view/video-view.component';\nimport { TimelineViewComponent } from './timeline-view/timeline-view.component';\nimport { OscilloscopeConfigViewComponent } from './oscilloscope-config-view/oscilloscope-config-view.component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [VideoViewComponent, TimelineViewComponent, OscilloscopeConfigViewComponent],\n  imports: [MatExpansionModule, CommonModule],\n  exports: [VideoViewComponent, OscilloscopeConfigViewComponent, TimelineViewComponent],\n})\nexport class UiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OscilloscopeConfigViewComponent"
                        },
                        {
                            "name": "TimelineViewComponent"
                        },
                        {
                            "name": "VideoViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OscilloscopeConfigViewComponent"
                        },
                        {
                            "name": "TimelineViewComponent"
                        },
                        {
                            "name": "VideoViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CLIENT_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/model/motion_connection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "ConnectionStateIndicator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<, literal type>",
                "defaultValue": "{\n  disconnected: { label: 'Disconnected', icon: 'usb_off' },\n  connecting: { label: 'Connecting...', icon: 'usb' },\n  connected: { label: 'Connected', icon: 'usb' },\n  error: { label: 'Error', icon: 'error_outline' },\n  unauthorized: { label: 'Unauthorized', icon: 'warning_amber' },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MOTION_TOOLS_CHUNK_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/model/motion_connection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getChunkType('MOTO')"
            },
            {
                "name": "NoInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/ui/video-view/video-view-stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/ui/video-view/video-view-stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<VideoViewComponent>",
                "defaultValue": "(args: VideoViewComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "checkArgument",
                "file": "src/utils/preconditions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Ensures the truth of an expression involving one or more parameters to the\ncalling method.</p>\n",
                "args": [
                    {
                        "name": "condition",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "condition",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkNotNull",
                "file": "src/utils/preconditions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Ensures that an object reference passed as a parameter to the calling method\nis not null or undefined.</p>\n",
                "args": [
                    {
                        "name": "reference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "reference",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkState",
                "file": "src/utils/preconditions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Ensures the truth of an expression involving the state of the calling\ninstance, but not involving any parameters to the calling method.</p>\n",
                "args": [
                    {
                        "name": "condition",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "condition",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "claimAdbInterface",
                "file": "src/model/motion_connection.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "device",
                        "type": "USBDevice",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<USBInterface>",
                "jsdoctags": [
                    {
                        "name": "device",
                        "type": "USBDevice",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createAdbDevice",
                "file": "src/model/motion_connection.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "serial",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<AdbDevice>",
                "jsdoctags": [
                    {
                        "name": "serial",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "delay",
                "file": "src/utils/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Promise that completes after the specified <code>timeMs</code></p>\n",
                "args": [
                    {
                        "name": "timeMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": "timeMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "fixedRetryDelay",
                "file": "src/utils/retry.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A <code>RetryDelay</code> that pauses the fixed amount of <code>delayMs</code> between reties</p>\n",
                "args": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "RetryDelay",
                "jsdoctags": [
                    {
                        "name": "delayMs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNamedError",
                "file": "src/utils/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "e",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Error",
                "jsdoctags": [
                    {
                        "name": "e",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "maxAttempts",
                "file": "src/utils/retry.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A <code>RetryIf</code> that limits the number of attempts to <code>maxAttempts</code>.</p>\n",
                "args": [
                    {
                        "name": "maxAttempts",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "RetryIf",
                "jsdoctags": [
                    {
                        "name": "maxAttempts",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "namedError",
                "file": "src/utils/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Error",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "retry",
                "file": "src/utils/retry.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Awaits the completion of the <code>Promise</code> returned by <code>code</code>, and retries if the\npromise fails to complete.</p>\n",
                "args": [
                    {
                        "name": "code",
                        "type": "RetryableFunction",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Promise<T>",
                "jsdoctags": [
                    {
                        "name": "code",
                        "type": "RetryableFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AttemptFailed",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/utils/retry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Callback after the <code>attempt</code>th attempt failed with <code>error</code></p>\n",
                "kind": 178
            },
            {
                "name": "DisposableFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/utils/disposer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Function type to be invoked when a disposer clear.</p>\n",
                "kind": 178
            },
            {
                "name": "RetryableFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/utils/retry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Starts the promise to try executing.</p>\n",
                "kind": 178
            },
            {
                "name": "RetryDelay",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/utils/retry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Delays the next retry, after failing the <code>attempt</code>th attempt.</p>\n",
                "kind": 178
            },
            {
                "name": "RetryIf",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/utils/retry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Determines whether a next retry should be attempted.</p>\n",
                "kind": 178
            },
            {
                "name": "State",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "OkState | ErrorState",
                "file": "src/model/motion_connection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/model/motion_connection.ts": [
                {
                    "name": "CLIENT_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/model/motion_connection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1"
                },
                {
                    "name": "MOTION_TOOLS_CHUNK_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/model/motion_connection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getChunkType('MOTO')"
                }
            ],
            "src/app/app.component.ts": [
                {
                    "name": "ConnectionStateIndicator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<, literal type>",
                    "defaultValue": "{\n  disconnected: { label: 'Disconnected', icon: 'usb_off' },\n  connecting: { label: 'Connecting...', icon: 'usb' },\n  connected: { label: 'Connected', icon: 'usb' },\n  error: { label: 'Error', icon: 'error_outline' },\n  unauthorized: { label: 'Unauthorized', icon: 'warning_amber' },\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/ui/video-view/video-view-stories.ts": [
                {
                    "name": "NoInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/ui/video-view/video-view-stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/ui/video-view/video-view-stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<VideoViewComponent>",
                    "defaultValue": "(args: VideoViewComponent) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/utils/preconditions.ts": [
                {
                    "name": "checkArgument",
                    "file": "src/utils/preconditions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Ensures the truth of an expression involving one or more parameters to the\ncalling method.</p>\n",
                    "args": [
                        {
                            "name": "condition",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "condition",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkNotNull",
                    "file": "src/utils/preconditions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Ensures that an object reference passed as a parameter to the calling method\nis not null or undefined.</p>\n",
                    "args": [
                        {
                            "name": "reference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "reference",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkState",
                    "file": "src/utils/preconditions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Ensures the truth of an expression involving the state of the calling\ninstance, but not involving any parameters to the calling method.</p>\n",
                    "args": [
                        {
                            "name": "condition",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "condition",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/model/motion_connection.ts": [
                {
                    "name": "claimAdbInterface",
                    "file": "src/model/motion_connection.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "device",
                            "type": "USBDevice",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<USBInterface>",
                    "jsdoctags": [
                        {
                            "name": "device",
                            "type": "USBDevice",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createAdbDevice",
                    "file": "src/model/motion_connection.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "serial",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<AdbDevice>",
                    "jsdoctags": [
                        {
                            "name": "serial",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/utils/utils.ts": [
                {
                    "name": "delay",
                    "file": "src/utils/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Promise that completes after the specified <code>timeMs</code></p>\n",
                    "args": [
                        {
                            "name": "timeMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": "timeMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNamedError",
                    "file": "src/utils/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "e",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Error",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "namedError",
                    "file": "src/utils/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Error",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/utils/retry.ts": [
                {
                    "name": "fixedRetryDelay",
                    "file": "src/utils/retry.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A <code>RetryDelay</code> that pauses the fixed amount of <code>delayMs</code> between reties</p>\n",
                    "args": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "RetryDelay",
                    "jsdoctags": [
                        {
                            "name": "delayMs",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxAttempts",
                    "file": "src/utils/retry.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A <code>RetryIf</code> that limits the number of attempts to <code>maxAttempts</code>.</p>\n",
                    "args": [
                        {
                            "name": "maxAttempts",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "RetryIf",
                    "jsdoctags": [
                        {
                            "name": "maxAttempts",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retry",
                    "file": "src/utils/retry.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Awaits the completion of the <code>Promise</code> returned by <code>code</code>, and retries if the\npromise fails to complete.</p>\n",
                    "args": [
                        {
                            "name": "code",
                            "type": "RetryableFunction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Promise<T>",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "RetryableFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/utils/retry.ts": [
                {
                    "name": "AttemptFailed",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/utils/retry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Callback after the <code>attempt</code>th attempt failed with <code>error</code></p>\n",
                    "kind": 178
                },
                {
                    "name": "RetryableFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/utils/retry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Starts the promise to try executing.</p>\n",
                    "kind": 178
                },
                {
                    "name": "RetryDelay",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/utils/retry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Delays the next retry, after failing the <code>attempt</code>th attempt.</p>\n",
                    "kind": 178
                },
                {
                    "name": "RetryIf",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/utils/retry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Determines whether a next retry should be attempted.</p>\n",
                    "kind": 178
                }
            ],
            "src/utils/disposer.ts": [
                {
                    "name": "DisposableFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/utils/disposer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Function type to be invoked when a disposer clear.</p>\n",
                    "kind": 178
                }
            ],
            "src/model/motion_connection.ts": [
                {
                    "name": "State",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "OkState | ErrorState",
                    "file": "src/model/motion_connection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 23,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ConnectionStateIndicator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/motion-viewer/motion-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MotionViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/model/motion_connection.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MotionConnection",
                "coveragePercent": 38,
                "coverageCount": "7/18",
                "status": "medium"
            },
            {
                "filePath": "src/model/motion_connection.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/model/motion_connection.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OkState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/model/motion_connection.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "claimAdbInterface",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/model/motion_connection.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createAdbDevice",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/model/motion_connection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLIENT_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/model/motion_connection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOTION_TOOLS_CHUNK_TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/model/video/video-source.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VideoSource",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/ui/oscilloscope-config-view/oscilloscope-config-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OscilloscopeConfigViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/ui/timeline-view/timeline-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/ui/video-view/video-view-stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/ui/video-view/video-view-stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/ui/video-view/video-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/utils/disposer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Disposer",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/disposer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Disposable",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/utils/preconditions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkArgument",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/preconditions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkNotNull",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/preconditions.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/progress.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProgressTracker",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "src/utils/retry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NonRetryableError",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/utils/retry.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "fixedRetryDelay",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/retry.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "maxAttempts",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/retry.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "retry",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Deferred",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "delay",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isNamedError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "namedError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}